/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.GestureEstimate;

public class SimpleDynamicGesture {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected SimpleDynamicGesture(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SimpleDynamicGesture obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        GestureEstimateJNI.delete_SimpleDynamicGesture(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public OptionalVec2f OnLeftTwoFingerSliding(Point3fList left) {
    return new OptionalVec2f(GestureEstimateJNI.SimpleDynamicGesture_OnLeftTwoFingerSliding(swigCPtr, this, Point3fList.getCPtr(left), left), true);
  }

  public OptionalVec2f OnRightTwoFingerSliding(Point3fList right) {
    return new OptionalVec2f(GestureEstimateJNI.SimpleDynamicGesture_OnRightTwoFingerSliding(swigCPtr, this, Point3fList.getCPtr(right), right), true);
  }

  public OptionalVec2f OnRightArmDown(Point3fList body) {
    return new OptionalVec2f(GestureEstimateJNI.SimpleDynamicGesture_OnRightArmDown(swigCPtr, this, Point3fList.getCPtr(body), body), true);
  }

  public OptionalVec2f OnLeftArmDown(Point3fList body) {
    return new OptionalVec2f(GestureEstimateJNI.SimpleDynamicGesture_OnLeftArmDown(swigCPtr, this, Point3fList.getCPtr(body), body), true);
  }

  public boolean OnFistBump(Point3fList left, Point3fList right) {
    return GestureEstimateJNI.SimpleDynamicGesture_OnFistBump(swigCPtr, this, Point3fList.getCPtr(left), left, Point3fList.getCPtr(right), right);
  }

  public boolean OnLeftPunching(Point3fList body, Point3fList left) {
    return GestureEstimateJNI.SimpleDynamicGesture_OnLeftPunching(swigCPtr, this, Point3fList.getCPtr(body), body, Point3fList.getCPtr(left), left);
  }

  public boolean OnRightPunching(Point3fList body, Point3fList right) {
    return GestureEstimateJNI.SimpleDynamicGesture_OnRightPunching(swigCPtr, this, Point3fList.getCPtr(body), body, Point3fList.getCPtr(right), right);
  }

  public OptionalFloat OnZoom(Point3fList left, Point3fList right) {
    return new OptionalFloat(GestureEstimateJNI.SimpleDynamicGesture_OnZoom(swigCPtr, this, Point3fList.getCPtr(left), left, Point3fList.getCPtr(right), right), true);
  }

  public boolean OnWaveLeftHand(Point3fList left) {
    return GestureEstimateJNI.SimpleDynamicGesture_OnWaveLeftHand(swigCPtr, this, Point3fList.getCPtr(left), left);
  }

  public boolean OnWaveRightHand(Point3fList right) {
    return GestureEstimateJNI.SimpleDynamicGesture_OnWaveRightHand(swigCPtr, this, Point3fList.getCPtr(right), right);
  }

  public boolean OnFlipLeftPalm(Point3fList left) {
    return GestureEstimateJNI.SimpleDynamicGesture_OnFlipLeftPalm(swigCPtr, this, Point3fList.getCPtr(left), left);
  }

  public boolean OnFlipRightPalm(Point3fList right) {
    return GestureEstimateJNI.SimpleDynamicGesture_OnFlipRightPalm(swigCPtr, this, Point3fList.getCPtr(right), right);
  }

  public boolean OnClapHands(Point3fList left, Point3fList right) {
    return GestureEstimateJNI.SimpleDynamicGesture_OnClapHands(swigCPtr, this, Point3fList.getCPtr(left), left, Point3fList.getCPtr(right), right);
  }

  public boolean OnTranslateLeftFist(Point3fList left) {
    return GestureEstimateJNI.SimpleDynamicGesture_OnTranslateLeftFist(swigCPtr, this, Point3fList.getCPtr(left), left);
  }

  public boolean OnTranslateRightFist(Point3fList right) {
    return GestureEstimateJNI.SimpleDynamicGesture_OnTranslateRightFist(swigCPtr, this, Point3fList.getCPtr(right), right);
  }

  public boolean OnCloseOpen(Point3fList left, Point3fList right) {
    return GestureEstimateJNI.SimpleDynamicGesture_OnCloseOpen(swigCPtr, this, Point3fList.getCPtr(left), left, Point3fList.getCPtr(right), right);
  }

  public boolean OnDragLeft(Point3fList left) {
    return GestureEstimateJNI.SimpleDynamicGesture_OnDragLeft(swigCPtr, this, Point3fList.getCPtr(left), left);
  }

  public boolean OnDragRight(Point3fList right) {
    return GestureEstimateJNI.SimpleDynamicGesture_OnDragRight(swigCPtr, this, Point3fList.getCPtr(right), right);
  }

  public ActionPoseV2Enum OnActionV2(Point3fList body) {
    return ActionPoseV2Enum.swigToEnum(GestureEstimateJNI.SimpleDynamicGesture_OnActionV2(swigCPtr, this, Point3fList.getCPtr(body), body));
  }

  public SlipEnum OnSlip(Point3fList body) {
    return SlipEnum.swigToEnum(GestureEstimateJNI.SimpleDynamicGesture_OnSlip(swigCPtr, this, Point3fList.getCPtr(body), body));
  }

  public void SetJumpThres(float up_shoulder_thres, float up_hip_thres, float up_ankle_thres, int max_frame_count) {
    GestureEstimateJNI.SimpleDynamicGesture_SetJumpThres(swigCPtr, this, up_shoulder_thres, up_hip_thres, up_ankle_thres, max_frame_count);
  }

  public boolean IsJump(Point3fList body) {
    return GestureEstimateJNI.SimpleDynamicGesture_IsJump(swigCPtr, this, Point3fList.getCPtr(body), body);
  }

  public void SetRunWalkAndStandThres(float foot_chg_thres, float run_wrists_height_thres, int max_frame_count, int chg_status_frame_count) {
    GestureEstimateJNI.SimpleDynamicGesture_SetRunWalkAndStandThres(swigCPtr, this, foot_chg_thres, run_wrists_height_thres, max_frame_count, chg_status_frame_count);
  }

  public ActionPoseV2Enum OnRunWalkAndStand(Point3fList body) {
    return ActionPoseV2Enum.swigToEnum(GestureEstimateJNI.SimpleDynamicGesture_OnRunWalkAndStand(swigCPtr, this, Point3fList.getCPtr(body), body));
  }

  public SlipEnum OnSlipV2LeftHand(Point3fList left, Point3fList body) {
    return SlipEnum.swigToEnum(GestureEstimateJNI.SimpleDynamicGesture_OnSlipV2LeftHand(swigCPtr, this, Point3fList.getCPtr(left), left, Point3fList.getCPtr(body), body));
  }

  public SlipEnum OnSlipV2RightHand(Point3fList right, Point3fList body) {
    return SlipEnum.swigToEnum(GestureEstimateJNI.SimpleDynamicGesture_OnSlipV2RightHand(swigCPtr, this, Point3fList.getCPtr(right), right, Point3fList.getCPtr(body), body));
  }

  public void SetSlipV2MoveThres(float hand_horizontal_move_thres, float hand_vertical_move_thres, float hand_horizontal_move_slope_angle, float hand_vertical_move_slope_angle, int frame_count, boolean dis_body_move) {
    GestureEstimateJNI.SimpleDynamicGesture_SetSlipV2MoveThres(swigCPtr, this, hand_horizontal_move_thres, hand_vertical_move_thres, hand_horizontal_move_slope_angle, hand_vertical_move_slope_angle, frame_count, dis_body_move);
  }

  public void SetSlipV2CheckBodyMoveThres(float body_horizontal_move_thres, float body_vertical_move_thres) {
    GestureEstimateJNI.SimpleDynamicGesture_SetSlipV2CheckBodyMoveThres(swigCPtr, this, body_horizontal_move_thres, body_vertical_move_thres);
  }

  public void SetRunWalkAndStandV2TimeParam(int frame_len, float run_delay_time, float walk_delay_time) {
    GestureEstimateJNI.SimpleDynamicGesture_SetRunWalkAndStandV2TimeParam(swigCPtr, this, frame_len, run_delay_time, walk_delay_time);
  }

  public void SetRunWalkAndStandV2MoveParam(float ankle_height_move_thres, float run_wrist_height_thres, float turn_round_recognation_angle) {
    GestureEstimateJNI.SimpleDynamicGesture_SetRunWalkAndStandV2MoveParam(swigCPtr, this, ankle_height_move_thres, run_wrist_height_thres, turn_round_recognation_angle);
  }

  public ActionPoseV2Enum OnRunWalkAndStandV2(Point3fList body, Point3fList body3d2d) {
    return ActionPoseV2Enum.swigToEnum(GestureEstimateJNI.SimpleDynamicGesture_OnRunWalkAndStandV2(swigCPtr, this, Point3fList.getCPtr(body), body, Point3fList.getCPtr(body3d2d), body3d2d));
  }

  public void SetSlipV3WristCommonWaveParam(ZwnWaveCommonConfig config) {
    GestureEstimateJNI.SimpleDynamicGesture_SetSlipV3WristCommonWaveParam(swigCPtr, this, ZwnWaveCommonConfig.getCPtr(config), config);
  }

  public void SetSlipV3WristHorizontalWaveParam(ZwnHorizontalWaveConfig config) {
    GestureEstimateJNI.SimpleDynamicGesture_SetSlipV3WristHorizontalWaveParam(swigCPtr, this, ZwnHorizontalWaveConfig.getCPtr(config), config);
  }

  public void SetSlipV3WristVerticalWaveParam(ZwnVerticalWaveConfig config) {
    GestureEstimateJNI.SimpleDynamicGesture_SetSlipV3WristVerticalWaveParam(swigCPtr, this, ZwnVerticalWaveConfig.getCPtr(config), config);
  }

  public void SetSlipV3CheckBodyMoveThres(boolean dis_body_move, float body_horizontal_move_thres, float body_vertical_move_thres) {
    GestureEstimateJNI.SimpleDynamicGesture_SetSlipV3CheckBodyMoveThres(swigCPtr, this, dis_body_move, body_horizontal_move_thres, body_vertical_move_thres);
  }

  public void InputSlipV3InfoParam(Point3fList pose, Point3fList left, Point3fList right) {
    GestureEstimateJNI.SimpleDynamicGesture_InputSlipV3InfoParam(swigCPtr, this, Point3fList.getCPtr(pose), pose, Point3fList.getCPtr(left), left, Point3fList.getCPtr(right), right);
  }

  public SlipEnum OnSlipV3LeftHand() {
    return SlipEnum.swigToEnum(GestureEstimateJNI.SimpleDynamicGesture_OnSlipV3LeftHand(swigCPtr, this));
  }

  public SlipEnum OnSlipV3RightHand() {
    return SlipEnum.swigToEnum(GestureEstimateJNI.SimpleDynamicGesture_OnSlipV3RightHand(swigCPtr, this));
  }

  public void SlipV3ResetData() {
    GestureEstimateJNI.SimpleDynamicGesture_SlipV3ResetData(swigCPtr, this);
  }

  public void SetPushPullDetector(int frame_count, float min_valid_height_thres, float horizontal_wrist_shoulder_thres, float vertical_wrist_shoulder_thres, int checkPoseCount, float push_pull_angle) {
    GestureEstimateJNI.SimpleDynamicGesture_SetPushPullDetector(swigCPtr, this, frame_count, min_valid_height_thres, horizontal_wrist_shoulder_thres, vertical_wrist_shoulder_thres, checkPoseCount, push_pull_angle);
  }

  public void InputPushPullInfoParam(Point3fList pose, Point3fList left, Point3fList right, Point3fList kpts3d) {
    GestureEstimateJNI.SimpleDynamicGesture_InputPushPullInfoParam(swigCPtr, this, Point3fList.getCPtr(pose), pose, Point3fList.getCPtr(left), left, Point3fList.getCPtr(right), right, Point3fList.getCPtr(kpts3d), kpts3d);
  }

  public PushPullType GetLeftPushPullStatus() {
    return PushPullType.swigToEnum(GestureEstimateJNI.SimpleDynamicGesture_GetLeftPushPullStatus(swigCPtr, this));
  }

  public PushPullType GetRightPushPullStatus() {
    return PushPullType.swigToEnum(GestureEstimateJNI.SimpleDynamicGesture_GetRightPushPullStatus(swigCPtr, this));
  }

  public float GetPushPullCurLeftArmAngle() {
    return GestureEstimateJNI.SimpleDynamicGesture_GetPushPullCurLeftArmAngle(swigCPtr, this);
  }

  public float GetPushPullCurRightArmAngle() {
    return GestureEstimateJNI.SimpleDynamicGesture_GetPushPullCurRightArmAngle(swigCPtr, this);
  }

  public SimpleDynamicGesture() {
    this(GestureEstimateJNI.new_SimpleDynamicGesture(), true);
  }

}
